class Core{static publicId;privateId;static userToken;constructor(e){if(Core.publicId=e,localStorage){const e=localStorage.getItem(btoa("purecore-access-token")),o=localStorage.getItem(btoa("purecore-refresh-token"));if(e&&o){const r=JSON.parse(atob(e));Core.userToken=new Token(r.accessToken,new Date(r.expires),JSON.parse(atob(o)).refreshToken)}}}static async call(e,o,r=!1){let t={method:"GET",headers:new Headers({Accept:"application/json"})};if(Core.userToken&&!r){const e=await Core.userToken.use();e&&(Core.userToken=e,Core.saveToken()),t.headers=new Headers({Accept:"application/json",Authorization:`Bearer ${Core.userToken.accessToken}`})}o&&(t={method:"POST",headers:new Headers({Accept:"application/json","Content-type":"application/json",Authorization:`Bearer ${Core.userToken.accessToken}`}),body:JSON.stringify(o)});const n=await fetch(`https://api.purecore.io${e}`,t);if(n.ok)return await n.json();throw new Error(await n.text())}getUser(){return new User}async login(e,o=["offline","payment/autofill","profile/list","profile/link","defaultScope"],r,t){o.includes("defaultScope")&&Core.publicId&&!o.includes(`network/${Core.publicId}`)&&o.push(`network/${Core.publicId}`),o=o.filter((e=>"defaultScope"!==e));const n=await LoginHelper.login(e,o,r?"code":"token",Core.publicId,r,t,Core.userToken?Core.userToken.accessToken:null);return Core.userToken||(Core.userToken=n,Core.saveToken()),this}static saveToken(){Core.userToken.refreshToken&&(localStorage.setItem(btoa("purecore-access-token"),btoa(JSON.stringify({accessToken:Core.userToken.accessToken,expires:Core.userToken.expires}))),Core.userToken.refreshToken&&localStorage.setItem(btoa("purecore-refresh-token"),btoa(JSON.stringify({refreshToken:Core.userToken.refreshToken}))))}}try{module.exports=Core}catch(e){}class LoginHelper{static activeWindow;static login(e,o,r,t,n,s,i){return new Promise(((a,c)=>{if(null!=window)try{null!=LoginHelper.activeWindow&&LoginHelper.activeWindow.close();let l=700,u=500;const p=window.top.outerHeight/2+window.top.screenY-l/2,d=window.top.outerWidth/2+window.top.screenX-u/2;let k=window.open(`https://api.purecore.io/oauth/authorize/${e}/?scope=${o.join(" ")}&response_type=${r}${null!=t?`&client_id=${t}`:""}${null!=n?`&redirect_uri=${n}`:""}${null!=s?`&state=${s}`:""}${null!=i?`&access_token=${i}`:""}`,"Login",`toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${u}, height=${l}, top=${p}, left=${d}`);LoginHelper.activeWindow=k;let h=!0,w=null;window.addEventListener("message",(e=>{if("https://api.purecore.io"===e.origin&&"login"===e.data.message)h&&(w=Token.fromObject(e.data.data),k.closed||(k.close(),LoginHelper.activeWindow=null),h=!1),a(w)}),!1);let f=setInterval((()=>{null!=LoginHelper.activeWindow&&LoginHelper.activeWindow.closed&&(LoginHelper.activeWindow=null),k.closed&&null==w&&(h=!1,clearInterval(f),c(new Error("The popup was closed before any session was retrieved")))}),50)}catch(e){c(e)}else c(new Error("In order to create a login popup, you must be executing purecore from a Document Object Model"))}))}}class Token{accessToken;refreshToken;expires;constructor(e,o,r){this.accessToken=e,this.expires=o,this.refreshToken=r}static fromObject(e){return new Token(e.access_token,new Date(e.expires),e.refresh_token)}async use(){if((new Date).getTime()>this.expires.getTime()){if(this.refreshToken){let e={grant_type:"refresh_token",refresh_token:this.refreshToken};return Core.publicId&&(e.client_id=Core.publicId),Token.fromObject(await Core.call("/oauth/token/",e,!0))}throw new Error("expired access token")}return null}}class Profile{service;id;name;email;constructor(e,o,r,t){this.service=e,this.id=o,this.name=r,this.email=t}static fromObject(e){return new Profile(e.service,e.id,e.name,e.email)}}class User{async getProfiles(){const e=await Core.call("/rest/3/user/profile/list/"),o=[];return e.forEach((e=>{o.push(Profile.fromObject(e))})),o}}